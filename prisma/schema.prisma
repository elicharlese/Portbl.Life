generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String?
  lastName      String?
  phone         String?
  role          Role      @default(USER)
  avatar        String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  carts         Cart[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Address management
model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders    Order[] @relation("ShippingAddress")
  billingOrders     Order[] @relation("BillingAddress")

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

// Product management
model Product {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?
  handle      String        @unique
  status      ProductStatus @default(DRAFT)
  vendor      String?
  productType String?
  tags        String[]
  seoTitle    String?
  seoDescription String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  wishlist      Wishlist[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  collections   ProductCollection[]

  @@map("products")
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  width     Int
  height    Int
  position  Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product  Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants ProductVariant[]

  @@map("product_images")
}

model ProductVariant {
  id             String  @id @default(cuid())
  productId      String
  title          String
  sku            String?
  price          Decimal @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  inventory      Int     @default(0)
  weight         Decimal? @db.Decimal(8, 2)
  weightUnit     String  @default("lb")
  taxable        Boolean @default(true)
  barcode        String?
  options        Json    @default("{}")
  imageId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  image      ProductImage? @relation(fields: [imageId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

// Collection management
model Collection {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  handle      String    @unique
  image       String?
  published   Boolean   @default(false)
  sortOrder   String?
  seoTitle    String?
  seoDescription String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  id           String     @id @default(cuid())
  productId    String
  collectionId String
  position     Int        @default(0)
  createdAt    DateTime   @default(now())

  // Relations
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([productId, collectionId])
  @@map("product_collections")
}

// Cart management
model Cart {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  variantId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([cartId, variantId])
  @@map("cart_items")
}

// Order management
model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String?
  email             String
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  subtotal          Decimal           @db.Decimal(10, 2)
  tax               Decimal           @db.Decimal(10, 2)
  shipping          Decimal           @db.Decimal(10, 2)
  discount          Decimal           @db.Decimal(10, 2) @default(0)
  total             Decimal           @db.Decimal(10, 2)
  currency          String            @default("USD")
  shippingAddressId String
  billingAddressId  String
  shippingMethod    String
  paymentMethod     PaymentMethod
  paymentDetails    Json?
  trackingNumber    String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user            User?           @relation(fields: [userId], references: [id])
  shippingAddress Address         @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address         @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  solanaPayments  SolanaPayment[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum PaymentMethod {
  STRIPE
  CRYPTO
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  productId    String
  variantId    String
  quantity     Int
  price        Decimal @db.Decimal(10, 2)
  title        String
  variantTitle String
  image        String?
  createdAt    DateTime @default(now())

  // Relations
  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Review management
model Review {
  id        String       @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String?
  content   String?
  verified  Boolean      @default(false)
  helpful   Int          @default(0)
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Wishlist management
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

// Solana payment management
model SolanaPayment {
  id              String              @id @default(cuid())
  orderId         String
  walletAddress   String
  amount          Decimal             @db.Decimal(20, 8)
  currency        SolanaCurrency
  status          SolanaPaymentStatus @default(PENDING)
  transactionHash String?
  blockHeight     BigInt?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("solana_payments")
}

enum SolanaCurrency {
  SOL
  USDC
  BTC
  ETH
}

enum SolanaPaymentStatus {
  PENDING
  CONFIRMING
  CONFIRMED
  FAILED
}

// Analytics and logs
model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("webhook_events")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  userId     String?
  sessionId  String
  properties Json
  timestamp  DateTime @default(now())

  @@map("analytics_events")
}
